plugins {
	id 'fabric-loom' version '1.3.8'
	id 'maven-publish'
}

archives_base_name = project.archives_base_name
version = project.version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // These repositories are for dependencies only
    // Do not put your mod in here unless you're building in CI/CD

    // Xaeros World Map API repository (commented out due to SSL issues)
    // maven {
    //     name = 'Xaeros'
    //     url = 'https://maven.xaero.eu/'
    // }
    
    // Additional mod repositories
    maven {
        name = 'ModMenu'
        url = 'https://maven.terraformersmc.com/'
    }

    maven {
        name = 'JitPack'
        url = 'https://jitpack.io'
    }
}

dependencies {
    // Minecraft and Fabric dependencies
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // ModMenu integration (for configuration)
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    // HTTP client for AppyProx API communication
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.google.code.gson:gson:2.10.1'
    
    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.mockito:mockito-core:4.6.1'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.6.1'
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archives_base_name}"}
    }
    
    manifest {
        attributes([
            'Main-Class': 'dev.aprilrenders.appyprox.AppyProxMain'
        ])
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// Configure the maven publication
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }

    repositories {
        // Placeholder for publishing repositories
    }
}